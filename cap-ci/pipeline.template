---
# Defining config.yaml datasources.
{{ $config := (datasource "config") }}

{{- if not (index $config "create-k8s") }}
groups:
{{- range $backend, $enabled := $config.backends }}{{ if $enabled }}
- name: {{ $backend }}
  jobs:
    {{- range $job, $enabled :=  $config.jobs }}{{ if $enabled }}
    {{- range $scheduler, $enabled := $config.schedulers }}{{ if $enabled }}
    {{- range $option, $enabled := $config.options }}{{ if $enabled }}
    - {{ $job }}-{{ $scheduler }}-{{ $backend }}-{{ $option }}
    {{- end }}{{ end }}
    {{- end }}{{ end }}
    {{- end }}{{ end }}
{{- end }}{{ end }}

- name: ALL
  jobs:
    {{- range $backend, $enabled := $config.backends }}{{ if $enabled }}
    {{- range $job, $enabled :=  $config.jobs }}{{ if $enabled }}
    {{- range $scheduler, $enabled := $config.schedulers }}{{ if $enabled }}
    {{- range $option, $enabled := $config.options }}{{ if $enabled }}
    - {{ $job }}-{{ $scheduler }}-{{ $backend }}-{{ $option }}
    {{- end }}{{ end }}
    {{- end }}{{ end }}
    {{- end }}{{ end }}
    {{- end }}{{ end }}
{{- end }}

resource_types:
- name: pull-request
  type: docker-image
  source:
    repository: teliaoss/github-pr-resource

- name: github-status
  type: docker-image
  source:
    repository: resource/github-status
    tag: release

- name: helm-chart
  type: docker-image
  source:
    repository: linkyard/helm-chart-resource

resources:
- name: catapult
  type: git
  source:
    branch: {{ $config.catapult.branch }}
    uri: {{ $config.catapult.uri }}

- name: s3.kubecf-bundle
  type: s3
  source:
    bucket: {{ $config.s3bucket }}
    access_key_id: ((aws-access-key))
    secret_access_key: ((aws-secret-key))
    {{- if eq $config.s3bucket "kubecf" }}
    regexp: kubecf-bundle-v(.*).tgz
    region_name: us-west-2
    {{- else if eq $config.s3bucket "cap-release-artifacts" }}
    regexp: CAP-(.*).tgz
    region_name: us-east-1
    {{- end }}

{{- if $config.jobs.stratos }}
- name: helm-chart.stratos-chart
  type: helm-chart
  source:
    chart: stratos/console
    repos:
    - name: stratos
      url: http://opensource.suse.com/stratos/

- name: helm-chart.stratos-metrics-chart
  type: helm-chart
  source:
    chart: stratos-metrics/metrics
    repos:
    - name: stratos-metrics
      url: http://opensource.suse.com/stratos-metrics/
{{ end }}

{{- if index $config "create-k8s" }}
- name: tfstate-pool
  type: pool
  source:
    uri: git@github.com:SUSE/cf-ci-pools.git
    private_key: ((github-private-key))
    branch: tfstate
    pool: tfstate
{{- end }}

# Pool resource with kube cluster information
{{- range $backend, $enabled := $config.backends }}{{ if $enabled }}
- name: {{ $backend }}-pool.kube-hosts
  type: pool
  source:
    uri: git@github.com:SUSE/cf-ci-pools.git
    private_key: ((github-private-key))
    branch: {{ $backend }}-kube-hosts
    pool: {{ $backend }}-kube-hosts
{{ end }}{{ end }}

{{- $pipelineName := .Env.PIPELINE }}

{{- $create_k8s := `
            # create k8s cluster
            export random_variable=$(hexdump -n 8 -e '2/4 "%08x"' /dev/urandom)
            export AWS_ACCESS_KEY_ID='((aws-ci-chuller-access-key-id))'
            export AWS_SECRET_ACCESS_KEY='((aws-ci-chuller-secret-access-key))'
            if [[ ${BACKEND} == "gke" ]]; then
              printf "%s" '((gke-key-json))' > $PWD/gke-key.json
              export GKE_CRED_JSON=$PWD/gke-key.json
              export GKE_CLUSTER_NAME=ci-${BACKEND}-${random_variable}
              export CLUSTER_NAME=${GKE_CLUSTER_NAME}
              export TF_KEY=${GKE_CLUSTER_NAME}
              (cd catapult; make BACKEND=${BACKEND} GKE_CREDS_JSON=$GKE_CRED_JSON GKE_CLUSTER_NAME=${GKE_CLUSTER_NAME} CLUSTER_NAME=${CLUSTER_NAME} TF_KEY=${TF_KEY} k8s)
              echo ${GKE_CLUSTER_NAME} > kubeconfig-pool/name
              cp catapult/build${GKE_CLUSTER_NAME}/kubeclusterreference kubeconfig-pool/metadata
              echo tf-${GKE_CLUSTER_NAME}.zip > tfstate-pool/name
              cp catapult/build${GKE_CLUSTER_NAME}/tf-setup.zip tfstate-pool/metadata
            else
              echo "CI cannot create ${BACKEND} cluster"
              exit 1
            fi
` }}

{{- $delete_k8s := `
                # delete k8s cluster
                cp ../tfstate-pool/metadata tfstate.zip
                export TFSTATE=$PWD/tfstate.zip
                export AWS_ACCESS_KEY_ID='((aws-ci-chuller-access-key-id))'
                export AWS_SECRET_ACCESS_KEY='((aws-ci-chuller-secret-access-key))'
                if [[ ${BACKEND} == "gke" ]]; then
                    printf "%s" '((gke-key-json))' > $PWD/gke-key.json
                    export GKE_CRED_JSON=$PWD/gke-key.json
                    export SCF_OPERATOR=true
                    make clean
                fi
` }}

{{- $obtain_kubeconfig := `
                # obtain kubeconfig from pool
                pool_file=${pool_file:-pool.kube-hosts/metadata}
                export CLUSTER_NAME=$(cat pool.kube-hosts/name)
                cp ${pool_file} catapult/kubeconfig_$CLUSTER_NAME
                pushd catapult
` }}

{{- $import_gke := `
                # create buildfolder prepared for gke
                export BACKEND=gke
                printf "%s" '((gke-key-json))' > $PWD/gke-key.json
                # GKE var exported here tso hijacking doesn't contain them in env
                export GKE_CRED_JSON=$PWD/gke-key.json
                export KUBECFG=$PWD/kubeconfig_$CLUSTER_NAME
                make kubeconfig
` }}

{{- $import_eks := `
                # create buildfolder prepared for eks
                export BACKEND=eks
                # AWS vars exported here so hijacking doesn't contain them in env
                export AWS_ACCESS_KEY_ID='((aws-ci-chuller-access-key-id))'
                export AWS_SECRET_ACCESS_KEY='((aws-ci-chuller-secret-access-key))'
                export KUBECFG=$PWD/kubeconfig_$CLUSTER_NAME
                make kubeconfig
` }}

{{- $import_aks := `
                # create buildfolder prepared for aks
                export BACKEND=aks
                export KUBECFG=$PWD/kubeconfig_$CLUSTER_NAME
                make kubeconfig
` }}

{{- $import_caasp4 := `
                # create buildfolder prepared for caasp4os
                export BACKEND=caasp4os
                export KUBECFG=$PWD/kubeconfig_$CLUSTER_NAME
                make kubeconfig
` }}

{{- $deploy := `
                # Attention: PWD = ___/catapult here
                # deploy kubecf from chart
                export SCF_CHART="$(readlink -f ../s3.kubecf-bundle/*.tgz)"
                export SCF_TESTGROUP=true
                export SCF_OPERATOR=true
                export DOCKER_ORG=cap-staging
                export QUIET_OUTPUT=true
                env | sort | sed -e 's|^|CONFIGURATION: |'
                make scf && make scf-login # ensure scf is there
` }}

{{- $test := `
                # Attention: PWD = ___/catapult here
                # run test suites on cluster
                # See: https://github.com/SUSE/catapult/wiki/Running-SCF-tests#kubecf
                export KUBECF_TEST_SUITE="${TEST_SUITE:-smokes}"
                export KUBECF_NAMESPACE="scf"
                export SCF_TESTGROUP=true
                export QUIET_OUTPUT=true
                env | sort | sed -e 's|^|CONFIGURATION: |'
                make tests-kubecf
` }}

{{- $stratos := `
                # Attention: PWD = ____/catapult here
                # obtain scf-config-values.yaml for stratos
                export QUIET_OUTPUT=true
                export SCF_TESTGROUP=true
                export SCF_OPERATOR=true
                export DOCKER_ORG=cap-staging
                make scf-gen-config
                # deploy stratos console & metrics
                export STRATOS_CHART="$(readlink -f ../helm-chart.stratos-chart/*.tgz)"
                export METRICS_CHART="$(readlink -f ../helm-chart.stratos-metrics-chart/*.tgz)"
                unset DOCKER_ORG # consume docker images from DOCKER_ORG=cap on stratos & metrics
                env | sort | sed -e 's|^|CONFIGURATION: |'
                make stratos metrics
` }}

{{- $upgrade := `
                # Attention: PWD = ___/catapult here
                # upgrade kubecf
                export SCF_CHART="$(readlink -f ../s3.kubecf-bundle/*.tgz)"
                export SCF_OPERATOR=true
                export DOCKER_ORG=cap-staging
                export QUIET_OUTPUT=true
                env | sort | sed -e 's|^|CONFIGURATION: |'
                make scf-chart # this takes the same chart as the deploy step for now
                make scf-gen-config
                make scf-upgrade
` }}

{{- $allbells := `
        # enable as much options as possible
        HA: true
        AUTOSCALER: true
` }}

jobs:
{{- range $backend, $enabled :=  $config.backends }}{{ if $enabled }}
{{- range $option, $enabled := $config.options }}{{ if $enabled }}
{{- range $scheduler, $enabled := $config.schedulers }}{{ if $enabled }}
# {{ $backend }}-{{ $option }}
{{- if index $config "create-k8s" }}
- name: create-k8s-{{ $scheduler }}-{{ $backend }}-{{ $option }}
  public: false
  plan:
  - get: s3.kubecf-bundle
    trigger: true
  {{- if $config.jobs.stratos }}
  - get: helm-chart.stratos-chart
    trigger: true
  - get: helm-chart.stratos-metrics-chart
    trigger: true
  {{ end }}
  - get: catapult
  - task: create-k8s
    {{- if has $config.workertags $backend }}
    tags: [$config.workertags.$backend]
    {{- end }}
    timeout: 2h30m
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      outputs:
      - name: kubeconfig-pool
        path: kubeconfig-pool
      - name: tfstate-pool
        path: tfstate-pool
      params:
        BACKEND: {{ $backend }}
        QUIET_OUTPUT: true
        DEFAULT_STACK: cflinuxfs3
        DOWNLOAD_CATAPULT_DEPS: false
      run:
        path: "/bin/bash"
        args:
          - -c
          - |
            {{- print $create_k8s }}
  - put: {{ $backend }}-pool.kube-hosts
    params:
      add_claimed: kubeconfig-pool
      depth: 1
    timeout: 6m
  - put: tfstate-pool
    params:
      add_claimed: tfstate-pool
      depth: 1
    timeout: 6m
  on_failure:
    do:
      - task: delete-k8s
        {{- if has $config.workertags $backend }}
        tags: [$config.workertags.$backend]
        {{- end }}
        timeout: 2h30m
        input_mapping:
          pool.kube-hosts: {{ $backend }}-pool.kube-hosts
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: splatform/catapult
          inputs:
          - name: catapult
          - name: pool.kube-hosts
          - name: tfstate-pool
          params:
            BACKEND: {{ $backend }}
            QUIET_OUTPUT: true
            DEFAULT_STACK: cflinuxfs3
            DOWNLOAD_CATAPULT_DEPS: false
            {{- if eq $scheduler "eirini" }}
            ENABLE_EIRINI: true
            {{ else }}
            ENABLE_EIRINI: false
            {{- end }}
          run:
            path: "/bin/bash"
            args:
              - -c
              - |
                {{- print $obtain_kubeconfig }}
                {{- if eq $backend "caasp4" }}
                {{- print $import_caasp4 }}
                {{- end }}
                {{- if eq $backend "eks" }}
                {{- print $import_eks }}
                {{- end }}
                {{- if eq $backend "gke" }}
                {{- print $import_gke }}
                {{- end }}
                {{- if eq $backend "aks" }}
                {{- print $import_aks }}
                {{- end }}
                {{- print $delete_k8s }}
      - put: {{ $backend }}-pool.kube-hosts
        params:
          remove: {{ $backend }}-pool.kube-hosts
          depth: 1
      - put: tfstate-pool
        params:
          remove: tfstate-pool
          depth: 1
{{ end }}

{{- if index $config.jobs "deploy" }}
- name: deploy-{{ $scheduler }}-{{ $backend }}-{{ $option }}
  public: false
  plan:
  - get: s3.kubecf-bundle
    {{- if not (index $config "create-k8s") }}
    trigger: true
    {{- end }}
  {{- if $config.jobs.stratos }}
  - get: helm-chart.stratos-chart
    {{- if not (index $config "create-k8s") }}
    trigger: true
    {{- end }}
  - get: helm-chart.stratos-metrics-chart
    {{- if not (index $config "create-k8s") }}
    trigger: true
    {{- end }}
  {{ end }}
  - get: catapult
  {{- if index $config "create-k8s" }}
  - get: {{ $backend }}-pool.kube-hosts
    passed:
    - create-k8s-{{ $scheduler }}-{{ $backend }}-{{ $option }}
    trigger: true
  - get: tfstate-pool
    passed:
    - create-k8s-{{ $scheduler }}-{{ $backend }}-{{ $option }}
  {{- else }}
  - put: {{ $backend }}-pool.kube-hosts
    params:
      acquire: true
      depth: 1
    timeout: 6m
  {{- end }}
  - task: deploy
    {{- if has $config.workertags $backend }}
    tags: [{{ index $config.workertags $backend }}]
    {{- end }}
    timeout: 2h30m
    input_mapping:
      pool.kube-hosts: {{ $backend }}-pool.kube-hosts
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: s3.kubecf-bundle
      - name: pool.kube-hosts
      params:
        BRAIN_VERBOSE: {{ index $config.brain "verbose" }}
        BRAIN_INORDER: {{ index $config.brain "inorder" }}
        BRAIN_INCLUDE: "{{ index $config.brain "include" }}"
        BRAIN_EXCLUDE: "{{ index $config.brain "exclude" }}"
        CATS_NODES: {{ index $config.cats "nodes" }}
        CATS_FLAKE_ATTEMPTS: {{ index $config.cats "flake-attempts" }}
        CATS_TIMEOUT_SCALE: {{ index $config.cats "timeout-scale" }}
        QUIET_OUTPUT: true
        DOWNLOAD_CATAPULT_DEPS: false
        DEFAULT_STACK: cflinuxfs3
{{- if eq $scheduler "eirini" }}
        ENABLE_EIRINI: true
{{ else }}
        ENABLE_EIRINI: false
{{- end }}
{{- if eq $option "ha" }}
        HA: true
{{- end }}
{{- if eq $option "all" }}
{{- print $allbells }}
{{- end }}
      run:
        path: "/bin/bash"
        args:
          - -c
          - |
            {{- print $obtain_kubeconfig }}
            {{- if eq $backend "caasp4" }}
            {{- print $import_caasp4 }}
            {{- end }}
            {{- if eq $backend "eks" }}
            {{- print $import_eks }}
            {{- end }}
            {{- if eq $backend "gke" }}
            {{- print $import_gke }}
            {{- end }}
            {{- if eq $backend "aks" }}
            {{- print $import_aks }}
            {{- end }}
            {{- print $deploy }}
  {{- if index $config "create-k8s" }}
  on_failure:
    do:
      - task: delete-k8s
        {{- if has $config.workertags $backend }}
        tags: [{{ index $config.workertags $backend }}]
        {{- end }}
        timeout: 2h30m
        input_mapping:
          pool.kube-hosts: {{ $backend }}-pool.kube-hosts
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: splatform/catapult
          inputs:
          - name: catapult
          - name: pool.kube-hosts
          - name: tfstate-pool
          params:
            BACKEND: {{ $backend }}
            QUIET_OUTPUT: true
            DEFAULT_STACK: cflinuxfs3
            DOWNLOAD_CATAPULT_DEPS: false
            {{- if eq $scheduler "eirini" }}
            ENABLE_EIRINI: true
            {{ else }}
            ENABLE_EIRINI: false
            {{- end }}
          run:
            path: "/bin/bash"
            args:
              - -c
              - |
                {{- print $obtain_kubeconfig }}
                {{- if eq $backend "caasp4" }}
                {{- print $import_caasp4 }}
                {{- end }}
                {{- if eq $backend "eks" }}
                {{- print $import_eks }}
                {{- end }}
                {{- if eq $backend "gke" }}
                {{- print $import_gke }}
                {{- end }}
                {{- if eq $backend "aks" }}
                {{- print $import_aks }}
                {{- end }}
                {{- print $delete_k8s }}
      - put: {{ $backend }}-pool.kube-hosts
        params:
          remove: {{ $backend }}-pool.kube-hosts
          depth: 1
      - put: tfstate-pool
        params:
          remove: tfstate-pool
          depth: 1
  {{- end }}
{{ end }}

{{- if index $config.jobs "smoke-tests" }}
- name: smoke-tests-{{ $scheduler }}-{{ $backend }}-{{ $option }}
  serial_groups: [{{ $scheduler }}-{{ $backend }}-{{ $option }}]
  public: false
  plan:
  - get: catapult
  - get: {{ $backend }}-pool.kube-hosts
    passed:
    - deploy-{{ $scheduler }}-{{ $backend }}-{{ $option }}
    trigger: true
  {{- if index $config "create-k8s" }}
  - get: tfstate-pool
    passed:
    - deploy-{{ $scheduler }}-{{ $backend }}-{{ $option }}
  {{- end }}
  - task: test-{{ $scheduler }}
    {{- if has $config.workertags $backend }}
    tags: [{{ index $config.workertags $backend }}]
    {{- end }}
    timeout: 1h30m
    input_mapping:
      pool.kube-hosts: {{ $backend }}-pool.kube-hosts
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: pool.kube-hosts
      params:
        QUIET_OUTPUT: true
        DOWNLOAD_CATAPULT_DEPS: false
        DEFAULT_STACK: cflinuxfs3
{{- if eq $scheduler "eirini" }}
        ENABLE_EIRINI: true
{{ else }}
        ENABLE_EIRINI: false
{{- end }}
{{- if eq $option "ha" }}
        HA: true
{{- end }}
{{- if eq $option "all" }}
{{- print $allbells }}
{{- end }}
        TEST_SUITE: smokes
      run:
        path: "/bin/bash"
        args:
          - -c
          - |
            {{- print $obtain_kubeconfig }}
            {{- if eq $backend "caasp4" }}
            {{- print $import_caasp4 }}
            {{- end }}
            {{- if eq $backend "eks" }}
            {{- print $import_eks }}
            {{- end }}
            {{- if eq $backend "gke" }}
            {{- print $import_gke }}
            {{- end }}
            {{- if eq $backend "aks" }}
            {{- print $import_aks }}
            {{- end }}
            {{- print $test }}
{{- if index $config "create-k8s" }}
  on_failure:
    do:
      - task: delete-k8s
        {{- if has $config.workertags $backend }}
        tags: [{{ index $config.workertags $backend }}]
        {{- end }}
        timeout: 2h30m
        input_mapping:
          pool.kube-hosts: {{ $backend }}-pool.kube-hosts
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: splatform/catapult
          inputs:
          - name: catapult
          - name: pool.kube-hosts
          - name: tfstate-pool
          params:
            BACKEND: {{ $backend }}
            QUIET_OUTPUT: true
            DEFAULT_STACK: cflinuxfs3
            DOWNLOAD_CATAPULT_DEPS: false
            {{- if eq $scheduler "eirini" }}
            ENABLE_EIRINI: true
            {{ else }}
            ENABLE_EIRINI: false
            {{- end }}
          run:
            path: "/bin/bash"
            args:
              - -c
              - |
                {{- print $obtain_kubeconfig }}
                {{- if eq $backend "caasp4" }}
                {{- print $import_caasp4 }}
                {{- end }}
                {{- if eq $backend "eks" }}
                {{- print $import_eks }}
                {{- end }}
                {{- if eq $backend "gke" }}
                {{- print $import_gke }}
                {{- end }}
                {{- if eq $backend "aks" }}
                {{- print $import_aks }}
                {{- end }}
                {{- print $delete_k8s }}
      - put: {{ $backend }}-pool.kube-hosts
        params:
          remove: {{ $backend }}-pool.kube-hosts
          depth: 1
      - put: tfstate-pool
        params:
          remove: tfstate-pool
          depth: 1
  {{- end }}
{{ end }}

{{- if index $config.jobs "cf-acceptance-tests-brain" }}
- name: cf-acceptance-tests-brain-{{ $scheduler }}-{{ $backend }}-{{ $option }}
  serial_groups: [{{ $scheduler }}-{{ $backend }}-{{ $option }}]
  public: false
  plan:
  - get: catapult
  - get: {{ $backend }}-pool.kube-hosts
    passed:
    - smoke-tests-{{ $scheduler }}-{{ $backend }}-{{ $option }}
    trigger: true
  {{- if index $config "create-k8s" }}
  - get: tfstate-pool
    passed:
    - smoke-tests-{{ $scheduler }}-{{ $backend }}-{{ $option }}
  {{- end }}
  - task: test-{{ $scheduler }}
    {{- if has $config.workertags $backend }}
    tags: [{{ index $config.workertags $backend }}]
    {{- end }}
    timeout: 5h30m
    input_mapping:
      pool.kube-hosts: {{ $backend }}-pool.kube-hosts
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: pool.kube-hosts
      params:
        QUIET_OUTPUT: true
        DOWNLOAD_CATAPULT_DEPS: false
        DEFAULT_STACK: cflinuxfs3
{{- if eq $scheduler "eirini" }}
        ENABLE_EIRINI: true
{{ else }}
        ENABLE_EIRINI: false
{{- end }}
{{- if eq $option "ha" }}
        HA: true
{{- end }}
{{- if eq $option "all" }}
{{- print $allbells }}
{{- end }}
        TEST_SUITE: brain
      run:
        path: "/bin/bash"
        args:
          - -c
          - |
            {{- print $obtain_kubeconfig }}
            {{- if eq $backend "caasp4" }}
            {{- print $import_caasp4 }}
            {{- end }}
            {{- if eq $backend "eks" }}
            {{- print $import_eks }}
            {{- end }}
            {{- if eq $backend "gke" }}
            {{- print $import_gke }}
            {{- end }}
            {{- if eq $backend "aks" }}
            {{- print $import_aks }}
            {{- end }}
            {{- print $test }}
  {{- if index $config "create-k8s" }}
  on_failure:
    do:
      - task: delete-k8s
        {{- if has $config.workertags $backend }}
        tags: [{{ index $config.workertags $backend }}]
        {{- end }}
        timeout: 2h30m
        input_mapping:
          pool.kube-hosts: {{ $backend }}-pool.kube-hosts
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: splatform/catapult
          inputs:
          - name: catapult
          - name: pool.kube-hosts
          - name: tfstate-pool
          params:
            BACKEND: {{ $backend }}
            QUIET_OUTPUT: true
            DEFAULT_STACK: cflinuxfs3
            DOWNLOAD_CATAPULT_DEPS: false
            {{- if eq $scheduler "eirini" }}
            ENABLE_EIRINI: true
            {{ else }}
            ENABLE_EIRINI: false
            {{- end }}
          run:
            path: "/bin/bash"
            args:
              - -c
              - |
                {{- print $obtain_kubeconfig }}
                {{- if eq $backend "caasp4" }}
                {{- print $import_caasp4 }}
                {{- end }}
                {{- if eq $backend "eks" }}
                {{- print $import_eks }}
                {{- end }}
                {{- if eq $backend "gke" }}
                {{- print $import_gke }}
                {{- end }}
                {{- if eq $backend "aks" }}
                {{- print $import_aks }}
                {{- end }}
                {{- print $delete_k8s }}
      - put: {{ $backend }}-pool.kube-hosts
        params:
          remove: {{ $backend }}-pool.kube-hosts
          depth: 1
      - put: tfstate-pool
        params:
          remove: tfstate-pool
          depth: 1
  {{- end }}
{{ end }}

{{- if index $config.jobs "cf-acceptance-tests" }}
- name: cf-acceptance-tests-{{ $scheduler }}-{{ $backend }}-{{ $option }}
  serial_groups: [{{ $scheduler }}-{{ $backend }}-{{ $option }}]
  public: false
  plan:
  - get: catapult
  - get: {{ $backend }}-pool.kube-hosts
    passed:
    - cf-acceptance-tests-brain-{{ $scheduler }}-{{ $backend }}-{{ $option }}
    trigger: true
  {{- if index $config "create-k8s" }}
  - get: tfstate-pool
    passed:
    - cf-acceptance-tests-brain-{{ $scheduler }}-{{ $backend }}-{{ $option }}
  {{- end }}
  - task: test-{{ $scheduler }}
    {{- if has $config.workertags $backend }}
    tags: [{{ index $config.workertags $backend }}]
    {{- end }}
    timeout: 5h30m
    input_mapping:
      pool.kube-hosts: {{ $backend }}-pool.kube-hosts
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: pool.kube-hosts
      params:
        QUIET_OUTPUT: true
        DOWNLOAD_CATAPULT_DEPS: false
        DEFAULT_STACK: cflinuxfs3
{{- if eq $scheduler "eirini" }}
        ENABLE_EIRINI: true
{{ else }}
        ENABLE_EIRINI: false
{{- end }}
{{- if eq $option "ha" }}
        HA: true
{{- end }}
{{- if eq $option "all" }}
{{- print $allbells }}
{{- end }}
        TEST_SUITE: cats
      run:
        path: "/bin/bash"
        args:
          - -c
          - |
            {{- print $obtain_kubeconfig}}
            {{- if eq $backend "caasp4" }}
            {{- print $import_caasp4 }}
            {{- end }}
            {{- if eq $backend "eks" }}
            {{- print $import_eks }}
            {{- end }}
            {{- if eq $backend "gke" }}
            {{- print $import_gke }}
            {{- end }}
            {{- if eq $backend "aks" }}
            {{- print $import_aks }}
            {{- end }}
            {{- print $test }}
  {{- if index $config "create-k8s" }}
  on_failure:
    do:
      - task: delete-k8s
        {{- if has $config.workertags $backend }}
        tags: [{{ index $config.workertags $backend }}]
        {{- end }}
        timeout: 2h30m
        input_mapping:
          pool.kube-hosts: {{ $backend }}-pool.kube-hosts
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: splatform/catapult
          inputs:
          - name: catapult
          - name: pool.kube-hosts
          - name: tfstate-pool
          params:
            BACKEND: {{ $backend }}
            QUIET_OUTPUT: true
            DEFAULT_STACK: cflinuxfs3
            DOWNLOAD_CATAPULT_DEPS: false
            {{- if eq $scheduler "eirini" }}
            ENABLE_EIRINI: true
            {{ else }}
            ENABLE_EIRINI: false
            {{- end }}
          run:
            path: "/bin/bash"
            args:
              - -c
              - |
                {{- print $obtain_kubeconfig }}
                {{- if eq $backend "caasp4" }}
                {{- print $import_caasp4 }}
                {{- end }}
                {{- if eq $backend "eks" }}
                {{- print $import_eks }}
                {{- end }}
                {{- if eq $backend "gke" }}
                {{- print $import_gke }}
                {{- end }}
                {{- if eq $backend "aks" }}
                {{- print $import_aks }}
                {{- end }}
                {{- print $delete_k8s }}
      - put: {{ $backend }}-pool.kube-hosts
        params:
          remove: {{ $backend }}-pool.kube-hosts
          depth: 1
      - put: tfstate-pool
        params:
          remove: tfstate-pool
          depth: 1
  {{- end }}
{{ end }}

{{- if index $config.jobs "sync-integration-tests" }}
- name: sync-integration-tests-{{ $scheduler }}-{{ $backend }}-{{ $option }}
  serial_groups: [{{ $scheduler }}-{{ $backend }}-{{ $option }}]
  public: false
  plan:
  - get: catapult
  - get: {{ $backend }}-pool.kube-hosts
    passed:
    - cf-acceptance-tests-{{ $scheduler }}-{{ $backend }}-{{ $option }}
    trigger: true
  {{- if index $config "create-k8s" }}
  - get: tfstate-pool
    passed:
    - cf-acceptance-tests-{{ $scheduler }}-{{ $backend }}-{{ $option }}
  {{- end }}
  - task: test-{{ $scheduler }}
    {{- if has $config.workertags $backend }}
    tags: [{{ index $config.workertags $backend }}]
    {{- end }}
    timeout: 5h30m
    input_mapping:
      pool.kube-hosts: {{ $backend }}-pool.kube-hosts
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: pool.kube-hosts
      params:
        QUIET_OUTPUT: true
        DOWNLOAD_CATAPULT_DEPS: false
        DEFAULT_STACK: cflinuxfs3
{{- if eq $scheduler "eirini" }}
        ENABLE_EIRINI: true
{{ else }}
        ENABLE_EIRINI: false
{{- end }}
{{- if eq $option "ha" }}
        HA: true
{{- end }}
{{- if eq $option "all" }}
{{- print $allbells }}
{{- end }}
        TEST_SUITE: sits
      run:
        path: "/bin/bash"
        args:
          - -c
          - |
            {{- print $obtain_kubeconfig }}
            {{- if eq $backend "caasp4" }}
            {{- print $import_caasp4 }}
            {{- end }}
            {{- if eq $backend "eks" }}
            {{- print $import_eks }}
            {{- end }}
            {{- if eq $backend "gke" }}
            {{- print $import_gke }}
            {{- end }}
            {{- if eq $backend "aks" }}
            {{- print $import_aks }}
            {{- end }}
            {{- print $test }}
  {{- if index $config "create-k8s" }}
  on_failure:
    do:
      - task: delete-k8s
        {{- if has $config.workertags $backend }}
        tags: [{{ index $config.workertags $backend }}]
        {{- end }}
        timeout: 2h30m
        input_mapping:
          pool.kube-hosts: {{ $backend }}-pool.kube-hosts
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: splatform/catapult
          inputs:
          - name: catapult
          - name: pool.kube-hosts
          - name: tfstate-pool
          params:
            BACKEND: {{ $backend }}
            QUIET_OUTPUT: true
            DEFAULT_STACK: cflinuxfs3
            DOWNLOAD_CATAPULT_DEPS: false
            {{- if eq $scheduler "eirini" }}
            ENABLE_EIRINI: true
            {{ else }}
            ENABLE_EIRINI: false
            {{- end }}
          run:
            path: "/bin/bash"
            args:
              - -c
              - |
                {{- print $obtain_kubeconfig }}
                {{- if eq $backend "caasp4" }}
                {{- print $import_caasp4 }}
                {{- end }}
                {{- if eq $backend "eks" }}
                {{- print $import_eks }}
                {{- end }}
                {{- if eq $backend "gke" }}
                {{- print $import_gke }}
                {{- end }}
                {{- if eq $backend "aks" }}
                {{- print $import_aks }}
                {{- end }}
                {{- print $delete_k8s }}
      - put: {{ $backend }}-pool.kube-hosts
        params:
          remove: {{ $backend }}-pool.kube-hosts
          depth: 1
      - put: tfstate-pool
        params:
          remove: tfstate-pool
          depth: 1
  {{- end }}
{{ end }}

{{- if index $config.jobs "upgrade" }}
- name: upgrade-{{ $scheduler }}-{{ $backend }}-{{ $option }}
  serial_groups: [{{ $scheduler }}-{{ $backend }}-{{ $option }}]
  public: false
  plan:
  - get: s3.kubecf-bundle
    trigger: false
  - get: catapult
  - get: {{ $backend }}-pool.kube-hosts
    passed:
    - sync-integration-tests-{{ $scheduler }}-{{ $backend }}-{{ $option }}
    trigger: true
  {{- if index $config "create-k8s" }}
  - get: tfstate-pool
    passed:
    - sync-integration-tests-{{ $scheduler }}-{{ $backend }}-{{ $option }}
  {{- end }}
  - task: upgrade-{{ $scheduler }}
    {{- if has $config.workertags $backend }}
    tags: [{{ index $config.workertags $backend }}]
    {{- end }}
    timeout: 5h30m
    input_mapping:
      pool.kube-hosts: {{ $backend }}-pool.kube-hosts
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: s3.kubecf-bundle
      - name: pool.kube-hosts
      params:
        QUIET_OUTPUT: true
        DOWNLOAD_CATAPULT_DEPS: false
        DEFAULT_STACK: cflinuxfs3
{{- if eq $scheduler "eirini" }}
        ENABLE_EIRINI: true
{{ else }}
        ENABLE_EIRINI: false
{{- end }}
{{- if eq $option "ha" }}
        HA: true
{{- end }}
{{- if eq $option "all" }}
{{- print $allbells }}
{{- end }}
        TEST_SUITE: cats
        TEST_SUITE: cats
        BACKEND: {{ $backend }}
      run:
        path: "/bin/bash"
        args:
          - -c
          - |
            {{- print $obtain_kubeconfig }}
            {{- if eq $backend "caasp4" }}
            {{- print $import_caasp4 }}
            {{- end }}
            {{- if eq $backend "eks" }}
            {{- print $import_eks }}
            {{- end }}
            {{- if eq $backend "gke" }}
            {{- print $import_gke }}
            {{- end }}
            {{- if eq $backend "aks" }}
            {{- print $import_aks }}
            {{- end }}
            {{- print $upgrade }}
  {{- if index $config "create-k8s" }}
  on_failure:
    do:
      - task: delete-k8s
        {{- if has $config.workertags $backend }}
        tags: [{{ index $config.workertags $backend }}]
        {{- end }}
        timeout: 2h30m
        input_mapping:
          pool.kube-hosts: {{ $backend }}-pool.kube-hosts
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: splatform/catapult
          inputs:
          - name: catapult
          - name: pool.kube-hosts
          - name: tfstate-pool
          params:
            BACKEND: {{ $backend }}
            QUIET_OUTPUT: true
            DEFAULT_STACK: cflinuxfs3
            DOWNLOAD_CATAPULT_DEPS: false
            {{- if eq $scheduler "eirini" }}
            ENABLE_EIRINI: true
            {{ else }}
            ENABLE_EIRINI: false
            {{- end }}
          run:
            path: "/bin/bash"
            args:
              - -c
              - |
                {{- print $obtain_kubeconfig }}
                {{- if eq $backend "caasp4" }}
                {{- print $import_caasp4 }}
                {{- end }}
                {{- if eq $backend "eks" }}
                {{- print $import_eks }}
                {{- end }}
                {{- if eq $backend "gke" }}
                {{- print $import_gke }}
                {{- end }}
                {{- if eq $backend "aks" }}
                {{- print $import_aks }}
                {{- end }}
                {{- print $delete_k8s }}
      - put: {{ $backend }}-pool.kube-hosts
        params:
          remove: {{ $backend }}-pool.kube-hosts
          depth: 1
      - put: tfstate-pool
        params:
          remove: tfstate-pool
          depth: 1
  {{- end }}
{{ end }}

{{- if index $config.jobs "stratos" }}
- name: stratos-{{ $scheduler }}-{{ $backend }}-{{ $option }}
  serial_groups: [{{ $scheduler }}-{{ $backend }}-{{ $option }}]
  public: false
  plan:
  - get: catapult
  - get: helm-chart.stratos-chart
  - get: helm-chart.stratos-metrics-chart
  - get: {{ $backend }}-pool.kube-hosts
    passed:
    - upgrade-{{ $scheduler }}-{{ $backend }}-{{ $option }}
    trigger: true
  {{- if index $config "create-k8s" }}
  - get: tfstate-pool
    passed:
    - upgrade-{{ $scheduler }}-{{ $backend }}-{{ $option }}
  {{- end }}
  - task: stratos-{{ $scheduler }}
    {{- if has $config.workertags $backend }}
    tags: [{{ index $config.workertags $backend }}]
    {{- end }}
    timeout: 5h30m
    input_mapping:
      pool.kube-hosts: {{ $backend }}-pool.kube-hosts
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: helm-chart.stratos-chart
      - name: helm-chart.stratos-metrics-chart
      - name: pool.kube-hosts
      params:
        QUIET_OUTPUT: true
        DOWNLOAD_CATAPULT_DEPS: false
        DEFAULT_STACK: cflinuxfs3
{{- if eq $scheduler "eirini" }}
        ENABLE_EIRINI: true
{{ else }}
        ENABLE_EIRINI: false
{{- end }}
{{- if eq $option "ha" }}
        HA: true
{{- end }}
{{- if eq $option "all" }}
{{- print $allbells }}
{{- end }}
        TEST_SUITE: cats
      run:
        path: "/bin/bash"
        args:
          - -c
          - |
            {{- print $obtain_kubeconfig }}
            {{- if eq $backend "caasp4" }}
            {{- print $import_caasp4 }}
            {{- end }}
            {{- if eq $backend "eks" }}
            {{- print $import_eks }}
            {{- end }}
            {{- if eq $backend "gke" }}
            {{- print $import_gke }}
            {{- end }}
            {{- if eq $backend "aks" }}
            {{- print $import_aks }}
            {{- end }}
            {{- print $stratos }}
  {{- if index $config "create-k8s" }}
  ensure:
    do:
      - task: delete-k8s
        {{- if has $config.workertags $backend }}
        tags: [{{ index $config.workertags $backend }}]
        {{- end }}
        timeout: 2h30m
        input_mapping:
          pool.kube-hosts: {{ $backend }}-pool.kube-hosts
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: splatform/catapult
          inputs:
          - name: catapult
          - name: pool.kube-hosts
          - name: tfstate-pool
          params:
            BACKEND: {{ $backend }}
            QUIET_OUTPUT: true
            DEFAULT_STACK: cflinuxfs3
            DOWNLOAD_CATAPULT_DEPS: false
            {{- if eq $scheduler "eirini" }}
            ENABLE_EIRINI: true
            {{ else }}
            ENABLE_EIRINI: false
            {{- end }}
          run:
            path: "/bin/bash"
            args:
              - -c
              - |
                {{- print $obtain_kubeconfig }}
                {{- if eq $backend "caasp4" }}
                {{- print $import_caasp4 }}
                {{- end }}
                {{- if eq $backend "eks" }}
                {{- print $import_eks }}
                {{- end }}
                {{- if eq $backend "gke" }}
                {{- print $import_gke }}
                {{- end }}
                {{- if eq $backend "aks" }}
                {{- print $import_aks }}
                {{- end }}
                {{- print $delete_k8s }}
      - put: {{ $backend }}-pool.kube-hosts
        params:
          remove: {{ $backend }}-pool.kube-hosts
          depth: 1
      - put: tfstate-pool
        params:
          remove: tfstate-pool
          depth: 1
  {{- end }}
{{ end }}

{{- end }}{{ end }} # end eirini
{{- end }}{{ end }} # end options
{{- end }}{{ end }} # end backend
