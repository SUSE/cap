---
{{ $config := ( tmpl.Exec "config" ) | data.JSON}}

{{- if not $config.create_k8s }}

groups:
{{ range $_, $Backend := (ds "BACKEND").backend -}} # for all backends
- name: {{$Backend}}
  jobs:
{{ range $_, $Jobs := slice "deploy" "smoke-tests" "cf-acceptance-tests-brain" "cf-acceptance-tests" "sync-integration-tests" "upgrade" "stratos" -}} # for jobs
{{ range $_, $EiriniFlag := (ds "EIRINI").eirini -}} # for eirini
{{ range $_, $OptionsFlag := (ds "OPTIONS").options -}} # for options
    - {{$Jobs}}-{{$EiriniFlag}}-{{$Backend}}-{{$OptionsFlag}}
{{ end }} # end jobs
{{ end }} # end eirini
{{ end }} # end OptionsFlag
{{ end }} # end backend
- name: ALL
  jobs:
{{ range $_, $Backend := (ds "BACKEND").backend -}} # for all backends
{{ range $_, $Jobs := slice "deploy" "smoke-tests" "cf-acceptance-tests-brain" "cf-acceptance-tests" "sync-integration-tests" "upgrade" "stratos" -}} # for jobs
{{ range $_, $EiriniFlag := (ds "EIRINI").eirini -}} # for eirini
{{ range $_, $OptionsFlag := (ds "OPTIONS").options -}} # for options
    - {{$Jobs}}-{{$EiriniFlag}}-{{$Backend}}-{{$OptionsFlag}}
{{ end }} # end jobs
{{ end }} # end eirini
{{ end }} # end options
{{ end }} # end backend

{{- end}}

resource_types:
- name: pull-request
  type: docker-image
  source:
    repository: teliaoss/github-pr-resource

- name: github-status
  type: docker-image
  source:
    repository: resource/github-status
    tag: release

- name: helm-chart
  type: docker-image
  source:
    repository: linkyard/helm-chart-resource

resources:
- name: catapult
  type: git
  source:
    branch: master
    uri: https://github.com/SUSE/catapult

- name: s3.kubecf-bundle
  type: s3
  source:
    bucket: kubecf
    access_key_id: ((aws-access-key))
    secret_access_key: ((aws-secret-key))
    region_name: us-west-2
    regexp: kubecf-bundle-v(.*).tgz

- name: helm-chart.stratos-chart
  type: helm-chart
  source:
    chart: stratos/console
    repos:
    - name: stratos
      url: http://opensource.suse.com/stratos/

- name: helm-chart.stratos-metrics-chart
  type: helm-chart
  source:
    chart: stratos-metrics/metrics
    repos:
    - name: stratos-metrics
      url: http://opensource.suse.com/stratos-metrics/

# Pool resource with kube cluster information
{{ range $_, $Backend := (ds "BACKEND").backend -}} # for all backends
- name: {{$Backend}}-pool.kube-hosts
  type: pool
  source:
    uri: git@github.com:SUSE/cf-ci-pools.git
    private_key: ((github-private-key))
    branch: {{$Backend}}-kube-hosts
    pool: {{$Backend}}-kube-hosts
{{end}}

{{ $pipelineName := .Env.PIPELINE }}

{{- $create_k8s := `
            # create k8s cluster
            export random_variable=$(hexdump -n 8 -e '2/4 "%08x"' /dev/urandom)
            if [[ ${BACKEND} == "gke" ]]; then
              printf "%s" '((gke-key-json))' > $PWD/gke-key.json
              export GKE_CRED_JSON=$PWD/gke-key.json
              export GKE_CLUSTER_NAME=ci-${BACKEND}-${random_variable}
              export CLUSTER_NAME=${GKE_CLUSTER_NAME}
              (cd catapult; make BACKEND=$BACKEND GKE_CREDS_JSON=$GKE_CRED_JSON GKE_CLUSTER_NAME=${GKE_CLUSTER_NAME} CLUSTER_NAME=${GKE_CLUSTER_NAME} k8s)
              echo ${GKE_CLUSTER_NAME} > kubeconfig-pool/name
              cp catapult/build${GKE_CLUSTER_NAME}/kubeconfig kubeconfig-pool/metadata
            else
              echo "CI cannot create ${BACKEND} cluster"
              exit 1
            fi
` }}

{{- $delete_k8s := `
                  # delete k8s cluster
                  if [[ ${BACKEND} == "gke" ]]; then
                      printf "%s" '((gke-key-json))' > $PWD/gke-key.json
                      export GKE_CRED_JSON=$PWD/gke-key.json
                      export CLUSTER_NAME=$(cat pool.kube-hosts/name)
                      pool_file=${pool_file:-pool.kube-hosts/metadata}
                      export GKE_CLUSTER_ZONE=$(cat ${pool_file} | grep current-context | cut -d'_' -f3)
                      gcloud auth activate-service-account --key-file=${GKE_CRED_JSON}
                      PROJECT=$(jq -r .project_id gke-key.json)
                      gcloud config set project ${PROJECT}
                      gcloud container clusters get-credentials ${CLUSTER_NAME} --zone ${GKE_CLUSTER_ZONE}
                      gcloud -q container clusters delete ${CLUSTER_NAME} --zone ${GKE_CLUSTER_ZONE}
                      echo "Pruning all the PV disks attached to the cluster ... "
                      filter=$(echo ${CLUSTER_NAME} | cut -c1-18)
                      gcloud -q compute disks delete --zone ${GKE_CLUSTER_ZONE} $(gcloud compute disks list --filter="name~'${filter}'" | grep ci-gke- | awk '{ print $1 }')
                  fi
` }}

{{- $obtain_kubeconfig := `
            # obtain kubeconfig from pool
            pool_file=${pool_file:-pool.kube-hosts/metadata}
            export CLUSTER_NAME=$(cat pool.kube-hosts/name)
            cp ${pool_file} catapult/kubeconfig_$CLUSTER_NAME
            pushd catapult
` }}

{{- $import_gke := `
            # create buildfolder prepared for gke
            export BACKEND=gke
            printf "%s" '((gke-key-json))' > $PWD/gke-key.json
            # GKE var exported here tso hijacking doesn't contain them in env
            export GKE_CRED_JSON=$PWD/gke-key.json
            export KUBECFG=$PWD/kubeconfig_$CLUSTER_NAME
            make kubeconfig
` }}

{{- $import_eks := `
            # create buildfolder prepared for eks
            export BACKEND=eks
            # AWS vars exported here so hijacking doesn't contain them in env
            export AWS_ACCESS_KEY_ID='((aws-ci-chuller-access-key-id))'
            export AWS_SECRET_ACCESS_KEY='((aws-ci-chuller-secret-access-key))'
            export KUBECFG=$PWD/kubeconfig_$CLUSTER_NAME
            make kubeconfig
` }}

{{- $import_aks := `
            # create buildfolder prepared for aks
            export BACKEND=aks
            export KUBECFG=$PWD/kubeconfig_$CLUSTER_NAME
            make kubeconfig
` }}

{{- $import_caasp4 := `
            # create buildfolder prepared for caasp4os
            export BACKEND=caasp4os
            export KUBECFG=$PWD/kubeconfig_$CLUSTER_NAME
            make kubeconfig
` }}

{{- $deploy := `
            # Attention: PWD = ___/catapult here
            # deploy kubecf from chart
            export SCF_CHART="$(readlink -f ../s3.kubecf-bundle/*.tgz)"
            export SCF_TESTGROUP=true
            export SCF_OPERATOR=true
            export DOCKER_ORG=cap-staging
            export QUIET_OUTPUT=true
            env | sort | sed -e 's|^|CONFIGURATION: |'
            make scf && make scf-login # ensure scf is there
` }}

{{- $test := `
            # Attention: PWD = ___/catapult here
            # run test suites on cluster
            # See: https://github.com/SUSE/catapult/wiki/Running-SCF-tests#kubecf
            export KUBECF_TEST_SUITE="${TEST_SUITE:-smokes}"
            export KUBECF_NAMESPACE="scf"
            export SCF_TESTGROUP=true
            export QUIET_OUTPUT=true
            env | sort | sed -e 's|^|CONFIGURATION: |'
            make tests-kubecf
` }}

{{- $stratos := `
            # Attention: PWD = ____/catapult here
            # obtain scf-config-values.yaml for stratos
            export QUIET_OUTPUT=true
            export SCF_TESTGROUP=true
            export SCF_OPERATOR=true
            export DOCKER_ORG=cap-staging
            make scf-gen-config
            # deploy stratos console & metrics
            export STRATOS_CHART="$(readlink -f ../helm-chart.stratos-chart/*.tgz)"
            export METRICS_CHART="$(readlink -f ../helm-chart.stratos-metrics-chart/*.tgz)"
            unset DOCKER_ORG # consume docker images from DOCKER_ORG=cap on stratos & metrics
            env | sort | sed -e 's|^|CONFIGURATION: |'
            make stratos metrics
` }}

{{- $upgrade := `
            # Attention: PWD = ___/catapult here
            # upgrade kubecf
            export SCF_CHART="$(readlink -f ../s3.kubecf-bundle/*.tgz)"
            export SCF_OPERATOR=true
            export DOCKER_ORG=cap-staging
            export QUIET_OUTPUT=true
            env | sort | sed -e 's|^|CONFIGURATION: |'
            make scf-chart # this takes the same chart as the deploy step for now
            make scf-gen-config
            make scf-upgrade
` }}

{{- $allbells := `
        # enable as much options as possible
        HA: true
        AUTOSCALER: true
` }}

jobs:
{{ range $_, $Backend := (ds "BACKEND").backend -}} # for all backends

{{ range $_, $OptionsFlag := (ds "OPTIONS").options -}} # for options

{{ range $_, $EiriniFlag := (ds "EIRINI").eirini -}} # for eirini

# {{$Backend}}-{{$OptionsFlag}}
{{- if $config.create_k8s }}
- name: create-k8s-{{ $EiriniFlag }}-{{ $Backend }}-{{ $OptionsFlag }}
  public: false
  plan:
  - get: s3.kubecf-bundle
    trigger: true
  - get: helm-chart.stratos-chart
    trigger: true
  - get: helm-chart.stratos-metrics-chart
    trigger: true
  - get: catapult
  - task: create-k8s
    privileged: true
    timeout: 2h30m
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      outputs:
      - name: kubeconfig-pool
        path: kubeconfig-pool
      params:
        BACKEND: {{$Backend}}
        QUIET_OUTPUT: true
        DEFAULT_STACK: cflinuxfs3
        DOWNLOAD_CATAPULT_DEPS: false
      run:
        path: "/bin/bash"
        args:
          - -c
          - |
            {{- print $create_k8s }}
  - put: {{$Backend}}-pool.kube-hosts
    params: {add_claimed: kubeconfig-pool}
    timeout: 2m
  on_failure:
    do:
      - task: delete-k8s
        privileged: true
        timeout: 2h30m
        input_mapping:
          pool.kube-hosts: {{$Backend}}-pool.kube-hosts
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: splatform/catapult
          inputs:
          - name: catapult
          - name: pool.kube-hosts
          params:
            BACKEND: {{$Backend}}
            QUIET_OUTPUT: true
            DEFAULT_STACK: cflinuxfs3
            DOWNLOAD_CATAPULT_DEPS: false
          run:
            path: "/bin/bash"
            args:
              - -c
              - |
                {{- print $delete_k8s }}
      - put: {{$Backend}}-pool.kube-hosts
        params: {remove: {{$Backend}}-pool.kube-hosts}
{{- end }}

- name: deploy-{{ $EiriniFlag }}-{{ $Backend }}-{{ $OptionsFlag }}
  public: false
  plan:
  - get: s3.kubecf-bundle
    {{- if not $config.create_k8s }}
    trigger: true
    {{- end }}
  - get: helm-chart.stratos-chart
    {{- if not $config.create_k8s }}
    trigger: true
    {{- end }}
  - get: helm-chart.stratos-metrics-chart
    {{- if not $config.create_k8s }}
    trigger: true
    {{- end }}
  - get: catapult
  {{- if $config.create_k8s }}
  - get: {{$Backend}}-pool.kube-hosts
    passed:
    - create-k8s-{{ $EiriniFlag }}-{{ $Backend }}-{{ $OptionsFlag }}
    trigger: true
  {{- else }}

  - put: {{$Backend}}-pool.kube-hosts
    params: {acquire: true}
    timeout: 2m
  {{- end }}
  - task: deploy
    privileged: true
    timeout: 2h30m
    input_mapping:
      pool.kube-hosts: {{$Backend}}-pool.kube-hosts
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: s3.kubecf-bundle
      - name: pool.kube-hosts
      params:
        BRAIN_VERBOSE: {{(ds "BRAIN_VERBOSE")}}
        BRAIN_INORDER: {{(ds "BRAIN_INORDER")}}
        BRAIN_INCLUDE: "{{(ds "BRAIN_INCLUDE")}}"
        BRAIN_EXCLUDE: "{{(ds "BRAIN_EXCLUDE")}}"
        QUIET_OUTPUT: true
        DOWNLOAD_CATAPULT_DEPS: false
        DEFAULT_STACK: cflinuxfs3
{{- if eq $EiriniFlag "eirini" }}
        ENABLE_EIRINI: true
{{ else }}
        ENABLE_EIRINI: false
{{- end }}
{{- if eq $OptionsFlag "ha" }}
        HA: true
{{- end }}
{{- if eq $OptionsFlag "all" }}
{{- print $allbells }}
{{- end }}
      run:
        path: "/bin/bash"
        args:
          - -c
          - |
            {{- print $obtain_kubeconfig }}
            {{- if eq $Backend "caasp4" }}
            {{- print $import_caasp4 }}
            {{- end }}
            {{- if eq $Backend "eks" }}
            {{- print $import_eks }}
            {{- end }}
            {{- if eq $Backend "gke" }}
            {{- print $import_gke }}
            {{- end }}
            {{- if eq $Backend "aks" }}
            {{- print $import_aks }}
            {{- end }}
            {{- print $deploy }}
  {{- if $config.create_k8s }}
  on_failure:
    do:
      - task: delete-k8s
        privileged: true
        timeout: 2h30m
        input_mapping:
          pool.kube-hosts: {{$Backend}}-pool.kube-hosts
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: splatform/catapult
          inputs:
          - name: catapult
          - name: pool.kube-hosts
          params:
            BACKEND: {{$Backend}}
            QUIET_OUTPUT: true
            DEFAULT_STACK: cflinuxfs3
            DOWNLOAD_CATAPULT_DEPS: false
          run:
            path: "/bin/bash"
            args:
              - -c
              - |
                {{- print $delete_k8s }}
      - put: {{$Backend}}-pool.kube-hosts
        params: {remove: {{$Backend}}-pool.kube-hosts}
  {{- end }}

- name: smoke-tests-{{$EiriniFlag}}-{{$Backend}}-{{$OptionsFlag}}
  serial_groups: [{{$EiriniFlag}}-{{$Backend}}-{{$OptionsFlag}}]
  public: false
  plan:
  - get: catapult
  - get: {{$Backend}}-pool.kube-hosts
    passed:
    - deploy-{{ $EiriniFlag }}-{{ $Backend }}-{{ $OptionsFlag }}
    trigger: true
  - task: test-{{$EiriniFlag}}
    privileged: true
    timeout: 1h30m
    input_mapping:
      pool.kube-hosts: {{$Backend}}-pool.kube-hosts
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: pool.kube-hosts
      params:
        QUIET_OUTPUT: true
        DOWNLOAD_CATAPULT_DEPS: false
        DEFAULT_STACK: cflinuxfs3
{{- if eq $EiriniFlag "eirini" }}
        ENABLE_EIRINI: true
{{ else }}
        ENABLE_EIRINI: false
{{- end }}
{{- if eq $OptionsFlag "ha" }}
        HA: true
{{- end }}
{{- if eq $OptionsFlag "all" }}
{{- print $allbells }}
{{- end }}
        TEST_SUITE: smokes
      run:
        path: "/bin/bash"
        args:
          - -c
          - |
            {{- print $obtain_kubeconfig }}
            {{- if eq $Backend "caasp4" }}
            {{- print $import_caasp4 }}
            {{- end }}
            {{- if eq $Backend "eks" }}
            {{- print $import_eks }}
            {{- end }}
            {{- if eq $Backend "gke" }}
            {{- print $import_gke }}
            {{- end }}
            {{- if eq $Backend "aks" }}
            {{- print $import_aks }}
            {{- end }}
            {{- print $test }}
  {{- if $config.create_k8s }}
  on_failure:
    do:
      - task: delete-k8s
        privileged: true
        timeout: 2h30m
        input_mapping:
          pool.kube-hosts: {{$Backend}}-pool.kube-hosts
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: splatform/catapult
          inputs:
          - name: catapult
          - name: pool.kube-hosts
          params:
            BACKEND: {{$Backend}}
            QUIET_OUTPUT: true
            DEFAULT_STACK: cflinuxfs3
            DOWNLOAD_CATAPULT_DEPS: false
          run:
            path: "/bin/bash"
            args:
              - -c
              - |
                {{- print $delete_k8s }}
      - put: {{$Backend}}-pool.kube-hosts
        params: {remove: {{$Backend}}-pool.kube-hosts}
  {{- end }}

- name: cf-acceptance-tests-brain-{{$EiriniFlag}}-{{$Backend}}-{{$OptionsFlag}}
  serial_groups: [{{$EiriniFlag}}-{{$Backend}}-{{$OptionsFlag}}]
  public: false
  plan:
  - get: catapult
  - get: {{$Backend}}-pool.kube-hosts
    passed:
    - smoke-tests-{{$EiriniFlag}}-{{$Backend}}-{{$OptionsFlag}}
    trigger: true
  - task: test-{{$EiriniFlag}}
    privileged: true
    timeout: 5h30m
    input_mapping:
      pool.kube-hosts: {{$Backend}}-pool.kube-hosts
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: pool.kube-hosts
      params:
        QUIET_OUTPUT: true
        DOWNLOAD_CATAPULT_DEPS: false
        DEFAULT_STACK: cflinuxfs3
{{- if eq $EiriniFlag "eirini" }}
        ENABLE_EIRINI: true
{{ else }}
        ENABLE_EIRINI: false
{{- end }}
{{- if eq $OptionsFlag "ha" }}
        HA: true
{{- end }}
{{- if eq $OptionsFlag "all" }}
{{- print $allbells }}
{{- end }}
        TEST_SUITE: brain
      run:
        path: "/bin/bash"
        args:
          - -c
          - |
            {{- print $obtain_kubeconfig }}
            {{- if eq $Backend "caasp4" }}
            {{- print $import_caasp4 }}
            {{- end }}
            {{- if eq $Backend "eks" }}
            {{- print $import_eks }}
            {{- end }}
            {{- if eq $Backend "gke" }}
            {{- print $import_gke }}
            {{- end }}
            {{- if eq $Backend "aks" }}
            {{- print $import_aks }}
            {{- end }}
            {{- print $test }}
  {{- if $config.create_k8s }}
  on_failure:
    do:
      - task: delete-k8s
        privileged: true
        timeout: 2h30m
        input_mapping:
          pool.kube-hosts: {{$Backend}}-pool.kube-hosts
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: splatform/catapult
          inputs:
          - name: catapult
          - name: pool.kube-hosts
          params:
            BACKEND: {{$Backend}}
            QUIET_OUTPUT: true
            DEFAULT_STACK: cflinuxfs3
            DOWNLOAD_CATAPULT_DEPS: false
          run:
            path: "/bin/bash"
            args:
              - -c
              - |
                {{- print $delete_k8s }}
      - put: {{$Backend}}-pool.kube-hosts
        params: {remove: {{$Backend}}-pool.kube-hosts}
  {{- end }}

- name: cf-acceptance-tests-{{$EiriniFlag}}-{{$Backend}}-{{$OptionsFlag}}
  serial_groups: [{{$EiriniFlag}}-{{$Backend}}-{{$OptionsFlag}}]
  public: false
  plan:
  - get: catapult
  - get: {{$Backend}}-pool.kube-hosts
    passed:
    - cf-acceptance-tests-brain-{{$EiriniFlag}}-{{$Backend}}-{{$OptionsFlag}}
    trigger: true
  - task: test-{{$EiriniFlag}}
    privileged: true
    timeout: 5h30m
    input_mapping:
      pool.kube-hosts: {{$Backend}}-pool.kube-hosts
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: pool.kube-hosts
      params:
        QUIET_OUTPUT: true
        DOWNLOAD_CATAPULT_DEPS: false
        DEFAULT_STACK: cflinuxfs3
{{- if eq $EiriniFlag "eirini" }}
        ENABLE_EIRINI: true
{{ else }}
        ENABLE_EIRINI: false
{{- end }}
{{- if eq $OptionsFlag "ha" }}
        HA: true
{{- end }}
{{- if eq $OptionsFlag "all" }}
{{- print $allbells }}
{{- end }}
        TEST_SUITE: cats
      run:
        path: "/bin/bash"
        args:
          - -c
          - |
            {{- print $obtain_kubeconfig}}
            {{- if eq $Backend "caasp4" }}
            {{- print $import_caasp4 }}
            {{- end }}
            {{- if eq $Backend "eks" }}
            {{- print $import_eks }}
            {{- end }}
            {{- if eq $Backend "gke" }}
            {{- print $import_gke }}
            {{- end }}
            {{- if eq $Backend "aks" }}
            {{- print $import_aks }}
            {{- end }}
            {{- print $test }}
  {{- if $config.create_k8s }}
  on_failure:
    do:
      - task: delete-k8s
        privileged: true
        timeout: 2h30m
        input_mapping:
          pool.kube-hosts: {{$Backend}}-pool.kube-hosts
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: splatform/catapult
          inputs:
          - name: catapult
          - name: pool.kube-hosts
          params:
            BACKEND: {{$Backend}}
            QUIET_OUTPUT: true
            DEFAULT_STACK: cflinuxfs3
            DOWNLOAD_CATAPULT_DEPS: false
          run:
            path: "/bin/bash"
            args:
              - -c
              - |
                {{- print $delete_k8s }}
      - put: {{$Backend}}-pool.kube-hosts
        params: {remove: {{$Backend}}-pool.kube-hosts}
  {{- end }}

- name: sync-integration-tests-{{$EiriniFlag}}-{{$Backend}}-{{$OptionsFlag}}
  serial_groups: [{{$EiriniFlag}}-{{$Backend}}-{{$OptionsFlag}}]
  public: false
  plan:
  - get: catapult
  - get: {{$Backend}}-pool.kube-hosts
    passed:
    - cf-acceptance-tests-{{$EiriniFlag}}-{{$Backend}}-{{$OptionsFlag}}
    trigger: true
  - task: test-{{$EiriniFlag}}
    privileged: true
    timeout: 5h30m
    input_mapping:
      pool.kube-hosts: {{$Backend}}-pool.kube-hosts
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: pool.kube-hosts
      params:
        QUIET_OUTPUT: true
        DOWNLOAD_CATAPULT_DEPS: false
        DEFAULT_STACK: cflinuxfs3
{{- if eq $EiriniFlag "eirini" }}
        ENABLE_EIRINI: true
{{ else }}
        ENABLE_EIRINI: false
{{- end }}
{{- if eq $OptionsFlag "ha" }}
        HA: true
{{- end }}
{{- if eq $OptionsFlag "all" }}
{{- print $allbells }}
{{- end }}
        TEST_SUITE: sits
      run:
        path: "/bin/bash"
        args:
          - -c
          - |
            {{- print $obtain_kubeconfig }}
            {{- if eq $Backend "caasp4" }}
            {{- print $import_caasp4 }}
            {{- end }}
            {{- if eq $Backend "eks" }}
            {{- print $import_eks }}
            {{- end }}
            {{- if eq $Backend "gke" }}
            {{- print $import_gke }}
            {{- end }}
            {{- if eq $Backend "aks" }}
            {{- print $import_aks }}
            {{- end }}
            {{- print $test }}
  {{- if $config.create_k8s }}
  on_failure:
    do:
      - task: delete-k8s
        privileged: true
        timeout: 2h30m
        input_mapping:
          pool.kube-hosts: {{$Backend}}-pool.kube-hosts
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: splatform/catapult
          inputs:
          - name: catapult
          - name: pool.kube-hosts
          params:
            BACKEND: {{$Backend}}
            QUIET_OUTPUT: true
            DEFAULT_STACK: cflinuxfs3
            DOWNLOAD_CATAPULT_DEPS: false
          run:
            path: "/bin/bash"
            args:
              - -c
              - |
                {{- print $delete_k8s }}
      - put: {{$Backend}}-pool.kube-hosts
        params: {remove: {{$Backend}}-pool.kube-hosts}
  {{- end }}

- name: upgrade-{{$EiriniFlag}}-{{$Backend}}-{{$OptionsFlag}}
  serial_groups: [{{$EiriniFlag}}-{{$Backend}}-{{$OptionsFlag}}]
  public: false
  plan:
  - get: s3.kubecf-bundle
    trigger: false
  - get: catapult
  - get: {{$Backend}}-pool.kube-hosts
    passed:
    - sync-integration-tests-{{$EiriniFlag}}-{{$Backend}}-{{$OptionsFlag}}
    trigger: true
  - task: upgrade-{{$EiriniFlag}}
    privileged: true
    timeout: 5h30m
    input_mapping:
      pool.kube-hosts: {{$Backend}}-pool.kube-hosts
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: s3.kubecf-bundle
      - name: pool.kube-hosts
      params:
        QUIET_OUTPUT: true
        DOWNLOAD_CATAPULT_DEPS: false
        DEFAULT_STACK: cflinuxfs3
{{- if eq $EiriniFlag "eirini" }}
        ENABLE_EIRINI: true
{{ else }}
        ENABLE_EIRINI: false
{{- end }}
{{- if eq $OptionsFlag "ha" }}
        HA: true
{{- end }}
{{- if eq $OptionsFlag "all" }}
{{- print $allbells }}
{{- end }}
        TEST_SUITE: cats
        TEST_SUITE: cats
        BACKEND: {{$Backend}}
      run:
        path: "/bin/bash"
        args:
          - -c
          - |
            {{- print $obtain_kubeconfig }}
            {{- if eq $Backend "caasp4" }}
            {{- print $import_caasp4 }}
            {{- end }}
            {{- if eq $Backend "eks" }}
            {{- print $import_eks }}
            {{- end }}
            {{- if eq $Backend "gke" }}
            {{- print $import_gke }}
            {{- end }}
            {{- if eq $Backend "aks" }}
            {{- print $import_aks }}
            {{- end }}
            {{- print $upgrade }}
  {{- if $config.create_k8s }}
  on_failure:
    do:
      - task: delete-k8s
        privileged: true
        timeout: 2h30m
        input_mapping:
          pool.kube-hosts: {{$Backend}}-pool.kube-hosts
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: splatform/catapult
          inputs:
          - name: catapult
          - name: pool.kube-hosts
          params:
            BACKEND: {{$Backend}}
            QUIET_OUTPUT: true
            DEFAULT_STACK: cflinuxfs3
            DOWNLOAD_CATAPULT_DEPS: false
          run:
            path: "/bin/bash"
            args:
              - -c
              - |
                {{- print $delete_k8s }}
      - put: {{$Backend}}-pool.kube-hosts
        params: {remove: {{$Backend}}-pool.kube-hosts}
  {{- end }}

- name: stratos-{{$EiriniFlag}}-{{$Backend}}-{{$OptionsFlag}}
  serial_groups: [{{$EiriniFlag}}-{{$Backend}}-{{$OptionsFlag}}]
  public: false
  plan:
  - get: catapult
  - get: helm-chart.stratos-chart
  - get: helm-chart.stratos-metrics-chart
  - get: {{$Backend}}-pool.kube-hosts
    passed:
    - upgrade-{{$EiriniFlag}}-{{$Backend}}-{{$OptionsFlag}}
    trigger: true
  - task: stratos-{{$EiriniFlag}}
    privileged: true
    timeout: 5h30m
    input_mapping:
      pool.kube-hosts: {{$Backend}}-pool.kube-hosts
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: helm-chart.stratos-chart
      - name: helm-chart.stratos-metrics-chart
      - name: pool.kube-hosts
      params:
        QUIET_OUTPUT: true
        DOWNLOAD_CATAPULT_DEPS: false
        DEFAULT_STACK: cflinuxfs3
{{- if eq $EiriniFlag "eirini" }}
        ENABLE_EIRINI: true
{{ else }}
        ENABLE_EIRINI: false
{{- end }}
{{- if eq $OptionsFlag "ha" }}
        HA: true
{{- end }}
{{- if eq $OptionsFlag "all" }}
{{- print $allbells }}
{{- end }}
        TEST_SUITE: cats
      run:
        path: "/bin/bash"
        args:
          - -c
          - |
            {{- print $obtain_kubeconfig }}
            {{- if eq $Backend "caasp4" }}
            {{- print $import_caasp4 }}
            {{- end }}
            {{- if eq $Backend "eks" }}
            {{- print $import_eks }}
            {{- end }}
            {{- if eq $Backend "gke" }}
            {{- print $import_gke }}
            {{- end }}
            {{- if eq $Backend "aks" }}
            {{- print $import_aks }}
            {{- end }}
            {{- print $stratos }}
  {{- if $config.create_k8s }}
  ensure:
    do:
      - task: delete-k8s
        privileged: true
        timeout: 2h30m
        input_mapping:
          pool.kube-hosts: {{$Backend}}-pool.kube-hosts
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: splatform/catapult
          inputs:
          - name: catapult
          - name: pool.kube-hosts
          params:
            BACKEND: {{$Backend}}
            QUIET_OUTPUT: true
            DEFAULT_STACK: cflinuxfs3
            DOWNLOAD_CATAPULT_DEPS: false
          run:
            path: "/bin/bash"
            args:
              - -c
              - |
                {{- print $delete_k8s }}
      - put: {{$Backend}}-pool.kube-hosts
        params: {remove: {{$Backend}}-pool.kube-hosts}
  {{- end }}

{{ end }} # end eirini
{{ end }} # end options
{{ end }} # end backend
