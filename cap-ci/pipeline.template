# Defining datasources.
{{- $config := (datasource "config") }}
groups:
{{- range $backend, $enabled := $config.backends }}{{ if $enabled }}
- name: {{ $backend }}
  jobs:
    {{- range $job, $enabled :=  $config.jobs }}{{ if $enabled }}
    {{- range $scheduler, $enabled := $config.schedulers }}{{ if $enabled }}
    {{- range $option, $enabled := $config.options }}{{ if $enabled }}
    - {{ $job }}-{{ $scheduler }}-{{ $backend }}-{{ $option }}
    {{- end }}{{ end }}
    {{- end }}{{ end }}
    {{- end }}{{ end }}
{{ end }}{{ end }}

- name: ALL
  jobs:
    {{- range $backend, $enabled := $config.backends }}{{ if $enabled }}
    {{- range $job, $enabled :=  $config.jobs }}{{ if $enabled }}
    {{- range $scheduler, $enabled := $config.schedulers }}{{ if $enabled }}
    {{- range $option, $enabled := $config.options }}{{ if $enabled }}
    - {{ $job }}-{{ $scheduler }}-{{ $backend }}-{{ $option }}
    {{- end }}{{ end }}
    {{- end }}{{ end }}
    {{- end }}{{ end }}
    {{- end }}{{ end }}

resource_types:
- name: pull-request
  type: docker-image
  source:
    repository: teliaoss/github-pr-resource

- name: github-status
  type: docker-image
  source:
    repository: resource/github-status
    tag: release

- name: helm-chart
  type: docker-image
  source:
    repository: linkyard/helm-chart-resource

resources:
- name: catapult
  type: git
  source:
    branch: {{ $config.catapult.branch }}
    uri: {{ $config.catapult.uri }}

- name: s3.kubecf-bundle
  type: s3
  source:
    bucket: kubecf
    access_key_id: ((aws-access-key))
    secret_access_key: ((aws-secret-key))
    region_name: us-west-2
    regexp: kubecf-bundle-v(.*).tgz

- name: helm-chart.stratos-chart
  type: helm-chart
  source:
    chart: stratos/console
    repos:
    - name: stratos
      url: http://opensource.suse.com/stratos/

- name: helm-chart.stratos-metrics-chart
  type: helm-chart
  source:
    chart: stratos-metrics/metrics
    repos:
    - name: stratos-metrics
      url: http://opensource.suse.com/stratos-metrics/

# Pool resource with kube cluster information
{{- range $backend, $enabled := $config.backends }}{{ if $enabled }}
- name: {{ $backend }}-pool.kube-hosts
  type: pool
  source:
    uri: git@github.com:SUSE/cf-ci-pools.git
    private_key: ((github-private-key))
    branch: {{ $backend }}-kube-hosts
    pool: {{ $backend }}-kube-hosts
{{- end }}{{ end }}

{{ $pipelineName := .Env.PIPELINE }}

{{- $obtain_kubeconfig := `
            # obtain kubeconfig from pool
            pool_file=${pool_file:-pool.kube-hosts/metadata}
            export CLUSTER_NAME=$(cat pool.kube-hosts/name)
            cp ${pool_file} catapult/kubeconfig_$CLUSTER_NAME
            pushd catapult
` }}

{{- $import_gke := `
            # create buildfolder prepared for gke
            export BACKEND=gke
            printf "%s" '((gke-key-json))' > $PWD/gke-key.json
            # GKE var exported here tso hijacking doesn't contain them in env
            export GKE_CRED_JSON=$PWD/gke-key.json
            export KUBECFG=$PWD/kubeconfig_$CLUSTER_NAME
            make kubeconfig
` }}

{{- $import_eks := `
            # create buildfolder prepared for eks
            export BACKEND=eks
            # AWS vars exported here so hijacking doesn't contain them in env
            export AWS_ACCESS_KEY_ID='((aws-ci-chuller-access-key-id))'
            export AWS_SECRET_ACCESS_KEY='((aws-ci-chuller-secret-access-key))'
            export KUBECFG=$PWD/kubeconfig_$CLUSTER_NAME
            make kubeconfig
` }}

{{- $import_aks := `
            # create buildfolder prepared for aks
            export BACKEND=aks
            export KUBECFG=$PWD/kubeconfig_$CLUSTER_NAME
            make kubeconfig
` }}

{{- $import_caasp4 := `
            # create buildfolder prepared for caasp4os
            export BACKEND=caasp4os
            export KUBECFG=$PWD/kubeconfig_$CLUSTER_NAME
            make kubeconfig
` }}

{{- $deploy := `
            # Attention: PWD = ___/catapult here
            # deploy kubecf from chart
            export SCF_CHART="$(readlink -f ../s3.kubecf-bundle/*.tgz)"
            export SCF_TESTGROUP=true
            export SCF_OPERATOR=true
            export DOCKER_ORG=cap-staging
            export QUIET_OUTPUT=true
            env | sort | sed -e 's|^|CONFIGURATION: |'
            make scf && make scf-login # ensure scf is there
` }}

{{- $test := `
            # Attention: PWD = ___/catapult here
            # run test suites on cluster
            # See: https://github.com/SUSE/catapult/wiki/Running-SCF-tests#kubecf
            export KUBECF_TEST_SUITE="${TEST_SUITE:-smokes}"
            export KUBECF_NAMESPACE="scf"
            export SCF_TESTGROUP=true
            export QUIET_OUTPUT=true
            env | sort | sed -e 's|^|CONFIGURATION: |'
            make tests-kubecf
` }}

{{- $stratos := `
            # Attention: PWD = ____/catapult here
            # obtain scf-config-values.yaml for stratos
            export QUIET_OUTPUT=true
            export SCF_TESTGROUP=true
            export SCF_OPERATOR=true
            export DOCKER_ORG=cap-staging
            make scf-gen-config
            # deploy stratos console & metrics
            export STRATOS_CHART="$(readlink -f ../helm-chart.stratos-chart/*.tgz)"
            export METRICS_CHART="$(readlink -f ../helm-chart.stratos-metrics-chart/*.tgz)"
            unset DOCKER_ORG # consume docker images from DOCKER_ORG=cap on stratos & metrics
            env | sort | sed -e 's|^|CONFIGURATION: |'
            make stratos metrics
` }}

{{- $upgrade := `
            # Attention: PWD = ___/catapult here
            # upgrade kubecf
            export SCF_CHART="$(readlink -f ../s3.kubecf-bundle/*.tgz)"
            export SCF_OPERATOR=true
            export DOCKER_ORG=cap-staging
            export QUIET_OUTPUT=true
            env | sort | sed -e 's|^|CONFIGURATION: |'
            make scf-chart # this takes the same chart as the deploy step for now
            make scf-gen-config
            make scf-upgrade
` }}

{{- $allbells := `
        # enable as much options as possible
        HA: true
        AUTOSCALER: true
` }}

jobs:
{{- range $backend, $enabled :=  $config.backends }}{{ if $enabled }}
{{- range $option, $enabled := $config.options }}{{ if $enabled }}
{{- range $scheduler, $enabled := $config.schedulers }}{{ if $enabled }}

# {{ $backend }}-{{ $option }}

- name: deploy-{{ $scheduler }}-{{ $backend }}-{{ $option }}
  public: false
  plan:
  - get: s3.kubecf-bundle
    trigger: true
  - get: helm-chart.stratos-chart
    trigger: true
  - get: helm-chart.stratos-metrics-chart
    trigger: true
  - get: catapult
  - put: {{ $backend }}-pool.kube-hosts
    params: {acquire: true}
    timeout: 2m
  - task: deploy
    privileged: true
    timeout: 2h30m
    input_mapping:
      pool.kube-hosts: {{ $backend }}-pool.kube-hosts
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: s3.kubecf-bundle
      - name: pool.kube-hosts
      params:
        BRAIN_VERBOSE: {{ $config.brain.verbose }}
        BRAIN_INORDER: {{ $config.brain.inorder }}
        BRAIN_INCLUDE: "{{ $config.brain.include }}"
        BRAIN_EXCLUDE: "{{ $config.brain.exclude }}"
        QUIET_OUTPUT: true
        DOWNLOAD_CATAPULT_DEPS: false
        DEFAULT_STACK: cflinuxfs3
{{- if eq $scheduler "eirini" }}
        ENABLE_EIRINI: true
{{ else }}
        ENABLE_EIRINI: false
{{- end }}
{{- if eq $option "ha" }}
        HA: true
{{- end }}
{{- if eq $option "all" }}
{{- print $allbells }}
{{- end }}
      run:
        path: "/bin/bash"
        args:
          - -c
          - |
            {{- print $obtain_kubeconfig }}
            {{- if eq $backend "caasp4" }}
            {{- print $import_caasp4 }}
            {{- end }}
            {{- if eq $backend "eks" }}
            {{- print $import_eks }}
            {{- end }}
            {{- if eq $backend "gke" }}
            {{- print $import_gke }}
            {{- end }}
            {{- if eq $backend "aks" }}
            {{- print $import_aks }}
            {{- end }}
            {{- print $deploy }}

- name: smoke-tests-{{ $scheduler }}-{{ $backend }}-{{ $option }}
  serial_groups: [{{ $scheduler }}-{{ $backend }}-{{ $option }}]
  public: false
  plan:
  - get: catapult
  - get: {{ $backend }}-pool.kube-hosts
    passed:
    - deploy-{{ $scheduler }}-{{ $backend }}-{{ $option }}
    trigger: true
  - task: test-{{ $scheduler }}
    privileged: true
    timeout: 1h30m
    input_mapping:
      pool.kube-hosts: {{ $backend }}-pool.kube-hosts
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: pool.kube-hosts
      params:
        QUIET_OUTPUT: true
        DOWNLOAD_CATAPULT_DEPS: false
        DEFAULT_STACK: cflinuxfs3
{{- if eq $scheduler "eirini" }}
        ENABLE_EIRINI: true
{{ else }}
        ENABLE_EIRINI: false
{{- end }}
{{- if eq $option "ha" }}
        HA: true
{{- end }}
{{- if eq $option "all" }}
{{- print $allbells }}
{{- end }}
        TEST_SUITE: smokes
      run:
        path: "/bin/bash"
        args:
          - -c
          - |
            {{- print $obtain_kubeconfig }}
            {{- if eq $backend "caasp4" }}
            {{- print $import_caasp4 }}
            {{- end }}
            {{- if eq $backend "eks" }}
            {{- print $import_eks }}
            {{- end }}
            {{- if eq $backend "gke" }}
            {{- print $import_gke }}
            {{- end }}
            {{- if eq $backend "aks" }}
            {{- print $import_aks }}
            {{- end }}
            {{- print $test }}

- name: cf-acceptance-tests-{{ $scheduler }}-{{ $backend }}-{{ $option }}
  serial_groups: [{{ $scheduler }}-{{ $backend }}-{{ $option }}]
  public: false
  plan:
  - get: catapult
  - get: {{ $backend }}-pool.kube-hosts
    passed:
    - smoke-tests-{{ $scheduler }}-{{ $backend }}-{{ $option }}
    trigger: true
  - task: test-{{ $scheduler }}
    privileged: true
    timeout: 5h30m
    input_mapping:
      pool.kube-hosts: {{ $backend }}-pool.kube-hosts
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: pool.kube-hosts
      params:
        QUIET_OUTPUT: true
        DOWNLOAD_CATAPULT_DEPS: false
        DEFAULT_STACK: cflinuxfs3
{{- if eq $scheduler "eirini" }}
        ENABLE_EIRINI: true
{{ else }}
        ENABLE_EIRINI: false
{{- end }}
{{- if eq $option "ha" }}
        HA: true
{{- end }}
{{- if eq $option "all" }}
{{- print $allbells }}
{{- end }}
        TEST_SUITE: cats
      run:
        path: "/bin/bash"
        args:
          - -c
          - |
            {{- print $obtain_kubeconfig}}
            {{- if eq $backend "caasp4" }}
            {{- print $import_caasp4 }}
            {{- end }}
            {{- if eq $backend "eks" }}
            {{- print $import_eks }}
            {{- end }}
            {{- if eq $backend "gke" }}
            {{- print $import_gke }}
            {{- end }}
            {{- if eq $backend "aks" }}
            {{- print $import_aks }}
            {{- end }}
            {{- print $test }}

- name: sync-integration-tests-{{ $scheduler }}-{{ $backend }}-{{ $option }}
  serial_groups: [{{ $scheduler }}-{{ $backend }}-{{ $option }}]
  public: false
  plan:
  - get: catapult
  - get: {{ $backend }}-pool.kube-hosts
    passed:
    - cf-acceptance-tests-{{ $scheduler }}-{{ $backend }}-{{ $option }}
    trigger: true
  - task: test-{{ $scheduler }}
    privileged: true
    timeout: 5h30m
    input_mapping:
      pool.kube-hosts: {{ $backend }}-pool.kube-hosts
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: pool.kube-hosts
      params:
        QUIET_OUTPUT: true
        DOWNLOAD_CATAPULT_DEPS: false
        DEFAULT_STACK: cflinuxfs3
{{- if eq $scheduler "eirini" }}
        ENABLE_EIRINI: true
{{ else }}
        ENABLE_EIRINI: false
{{- end }}
{{- if eq $option "ha" }}
        HA: true
{{- end }}
{{- if eq $option "all" }}
{{- print $allbells }}
{{- end }}
        TEST_SUITE: sits
      run:
        path: "/bin/bash"
        args:
          - -c
          - |
            {{- print $obtain_kubeconfig }}
            {{- if eq $backend "caasp4" }}
            {{- print $import_caasp4 }}
            {{- end }}
            {{- if eq $backend "eks" }}
            {{- print $import_eks }}
            {{- end }}
            {{- if eq $backend "gke" }}
            {{- print $import_gke }}
            {{- end }}
            {{- if eq $backend "aks" }}
            {{- print $import_aks }}
            {{- end }}
            {{- print $test }}

- name: cf-acceptance-tests-brain-{{ $scheduler }}-{{ $backend }}-{{ $option }}
  serial_groups: [{{ $scheduler }}-{{ $backend }}-{{ $option }}]
  public: false
  plan:
  - get: catapult
  - get: {{ $backend }}-pool.kube-hosts
    passed:
    - sync-integration-tests-{{ $scheduler }}-{{ $backend }}-{{ $option }}
    trigger: true
  - task: test-{{ $scheduler }}
    privileged: true
    timeout: 5h30m
    input_mapping:
      pool.kube-hosts: {{ $backend }}-pool.kube-hosts
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: pool.kube-hosts
      params:
        QUIET_OUTPUT: true
        DOWNLOAD_CATAPULT_DEPS: false
        DEFAULT_STACK: cflinuxfs3
{{- if eq $scheduler "eirini" }}
        ENABLE_EIRINI: true
{{ else }}
        ENABLE_EIRINI: false
{{- end }}
{{- if eq $option "ha" }}
        HA: true
{{- end }}
{{- if eq $option "all" }}
{{- print $allbells }}
{{- end }}
        TEST_SUITE: brain
      run:
        path: "/bin/bash"
        args:
          - -c
          - |
            {{- print $obtain_kubeconfig }}
            {{- if eq $backend "caasp4" }}
            {{- print $import_caasp4 }}
            {{- end }}
            {{- if eq $backend "eks" }}
            {{- print $import_eks }}
            {{- end }}
            {{- if eq $backend "gke" }}
            {{- print $import_gke }}
            {{- end }}
            {{- if eq $backend "aks" }}
            {{- print $import_aks }}
            {{- end }}
            {{- print $test }}

- name: upgrade-{{ $scheduler }}-{{ $backend }}-{{ $option }}
  serial_groups: [{{ $scheduler }}-{{ $backend }}-{{ $option }}]
  public: false
  plan:
  - get: s3.kubecf-bundle
    trigger: false
  - get: catapult
  - get: {{ $backend }}-pool.kube-hosts
    passed:
    - cf-acceptance-tests-brain-{{ $scheduler }}-{{ $backend }}-{{ $option }}
    trigger: true
  - task: upgrade-{{ $scheduler }}
    privileged: true
    timeout: 5h30m
    input_mapping:
      pool.kube-hosts: {{ $backend }}-pool.kube-hosts
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: s3.kubecf-bundle
      - name: pool.kube-hosts
      params:
        QUIET_OUTPUT: true
        DOWNLOAD_CATAPULT_DEPS: false
        DEFAULT_STACK: cflinuxfs3
{{- if eq $scheduler "eirini" }}
        ENABLE_EIRINI: true
{{ else }}
        ENABLE_EIRINI: false
{{- end }}
{{- if eq $option "ha" }}
        HA: true
{{- end }}
{{- if eq $option "all" }}
{{- print $allbells }}
{{- end }}
        TEST_SUITE: cats
        TEST_SUITE: cats
        BACKEND: {{ $backend }}
      run:
        path: "/bin/bash"
        args:
          - -c
          - |
            {{- print $obtain_kubeconfig }}
            {{- if eq $backend "caasp4" }}
            {{- print $import_caasp4 }}
            {{- end }}
            {{- if eq $backend "eks" }}
            {{- print $import_eks }}
            {{- end }}
            {{- if eq $backend "gke" }}
            {{- print $import_gke }}
            {{- end }}
            {{- if eq $backend "aks" }}
            {{- print $import_aks }}
            {{- end }}
            {{- print $upgrade }}

- name: stratos-{{ $scheduler }}-{{ $backend }}-{{ $option }}
  serial_groups: [{{ $scheduler }}-{{ $backend }}-{{ $option }}]
  public: false
  plan:
  - get: catapult
  - get: helm-chart.stratos-chart
  - get: helm-chart.stratos-metrics-chart
  - get: {{ $backend }}-pool.kube-hosts
    passed:
    - upgrade-{{ $scheduler }}-{{ $backend }}-{{ $option }}
    trigger: true
  - task: stratos-{{ $scheduler }}
    privileged: true
    timeout: 5h30m
    input_mapping:
      pool.kube-hosts: {{ $backend }}-pool.kube-hosts
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: helm-chart.stratos-chart
      - name: helm-chart.stratos-metrics-chart
      - name: pool.kube-hosts
      params:
        QUIET_OUTPUT: true
        DOWNLOAD_CATAPULT_DEPS: false
        DEFAULT_STACK: cflinuxfs3
{{- if eq $scheduler "eirini" }}
        ENABLE_EIRINI: true
{{ else }}
        ENABLE_EIRINI: false
{{- end }}
{{- if eq $option "ha" }}
        HA: true
{{- end }}
{{- if eq $option "all" }}
{{- print $allbells }}
{{- end }}
        TEST_SUITE: cats
      run:
        path: "/bin/bash"
        args:
          - -c
          - |
            {{- print $obtain_kubeconfig }}
            {{- if eq $backend "caasp4" }}
            {{- print $import_caasp4 }}
            {{- end }}
            {{- if eq $backend "eks" }}
            {{- print $import_eks }}
            {{- end }}
            {{- if eq $backend "gke" }}
            {{- print $import_gke }}
            {{- end }}
            {{- if eq $backend "aks" }}
            {{- print $import_aks }}
            {{- end }}
            {{- print $stratos }}

{{- end }}{{ end }} # end eirini
{{- end }}{{ end }} # end options
{{- end }}{{ end }} # end backend
