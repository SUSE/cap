{{ define "scripts_deploy_k8s" }}
{{- /* create k8s cluster */}}
export random_variable=$(hexdump -n 8 -e '2/4 "%08x"' /dev/urandom)
export AWS_ACCESS_KEY_ID='((aws-ci-chuller-access-key-id))'
export AWS_SECRET_ACCESS_KEY='((aws-ci-chuller-secret-access-key))'
if [[ ${BACKEND} == "gke" ]]; then
  printf "%s" '((gke-key-json))' > $PWD/gke-key.json
  export GKE_CRED_JSON=$PWD/gke-key.json
  export GKE_CLUSTER_NAME=ci-${BACKEND}-${random_variable}
  export CLUSTER_NAME=${GKE_CLUSTER_NAME}
  export TF_KEY=${GKE_CLUSTER_NAME}
  (cd catapult; make BACKEND=${BACKEND} GKE_CREDS_JSON=$GKE_CRED_JSON GKE_CLUSTER_NAME=${GKE_CLUSTER_NAME} CLUSTER_NAME=${CLUSTER_NAME} TF_KEY=${TF_KEY} k8s)
  echo ${GKE_CLUSTER_NAME} > kubeconfig-pool/name
  cp catapult/build${GKE_CLUSTER_NAME}/kubeclusterreference kubeconfig-pool/metadata
  echo tf-${GKE_CLUSTER_NAME}.zip > tfstate-pool/name
  cp catapult/build${GKE_CLUSTER_NAME}/tf-setup.zip tfstate-pool/metadata
elif [[ ${BACKEND} == "aks" ]]; then
  printf "%s" '((azure-dns-json))' > $PWD/azure-dns-key.json
  export AZURE_DNS_JSON_PATH=$PWD/azure-dns-key.json
  export AZURE_CLUSTER_NAME=ci-${BACKEND}-${random_variable}
  export CLUSTER_NAME=${AZURE_CLUSTER_NAME}
  export TF_KEY=${AZURE_CLUSTER_NAME}
  (cd catapult; make BACKEND=${BACKEND} AZURE_APP_ID='((azure-sp-creds.app_id))' AZURE_PASSWORD='((azure-sp-creds.password))' AZURE_TENANT_ID='((azure-sp-creds.tenant_id))' AZURE_SUBSCRIPTION_ID='((azure-sp-creds.subscription_id))' AZURE_DNS_JSON=${AZURE_DNS_JSON_PATH} AZURE_RESOURCE_GROUP=${AZURE_CLUSTER_NAME}-rg AZURE_CLUSTER_NAME=${AZURE_CLUSTER_NAME} CLUSTER_NAME=${CLUSTER_NAME} TF_KEY=${TF_KEY} k8s)
  echo ${AZURE_CLUSTER_NAME} > kubeconfig-pool/name
  cp catapult/build${AZURE_CLUSTER_NAME}/kubeconfig kubeconfig-pool/metadata
  echo tf-${AZURE_CLUSTER_NAME}.zip > tfstate-pool/name
  cp catapult/build${AZURE_CLUSTER_NAME}/tf-setup.zip tfstate-pool/metadata
else
  echo "CI cannot create ${BACKEND} cluster"
  exit 1
fi
{{ end }}
